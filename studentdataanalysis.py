# -*- coding: utf-8 -*-
"""Studentdataanalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UApDoe6C8BuMa1Jof-hh0X1y9fd5Epwl
"""

import pandas as pd
import random
students =["Prioty", "Niha", "Sadia", "Rafia", "Subha"]
subjects =["Math", "Science", "Geography", "Statistics"]
student_id =[f"S{1000 + i}" for i in range(len(students))]
assignment_status = ["Yes", "No"]

data = []
for students, student_id in zip(students, student_id):
    for subject in subjects:
        score = random.randint(50, 100)
        attendance = round(random.uniform(70, 100), 2)
        completed_assignment = random.choice(assignment_status)
        data.append([students, student_id, subject, score, attendance, completed_assignment])

columns = ["Student Name", "Student ID", "Subject", "Score", "Attendance Percentage", "Assignment Completion"]
student_performance_df = pd.DataFrame(data, columns=columns)

file_path = "student_performance.csv"
student_performance_df.to_csv(file_path, index=False)
print(f"CSV file 'student_performance.csv' has been generated at: {file_path}")
print(student_performance_df)

import csv


input_file = "student_performance.csv"
output_file = "updated_student_performance.csv"


try:
    with open(input_file, mode='r') as file:
        reader = csv.reader(file)
        data = list(reader)


    print("Original Data:")
    for row in data:
        print(row)


    header = data[0]
    updated_data = [header]
    for row in data[1:]:
        if row[3].isdigit():
            row[3] = str(min(100, int(row[3]) + 5))
        updated_data.append(row)


    with open(output_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(updated_data)

    print("\nData has been updated and written to:", output_file)

except FileNotFoundError:
    print(f"Error: The file '{input_file}' does not exist.")

updated_student_performance=updated_data
print(updated_student_performance)

import pandas as pd


file_path = "student_performance.csv"
student_data = pd.read_csv(file_path)


score_analysis = student_data.groupby("Student Name")["Score"].agg(
    Average_Score="mean", Min_Score="min", Max_Score="max"
).reset_index()


print("Score Analysis (Average, Min, Max):")
print(score_analysis)


score_analysis.to_csv("score_analysis.csv", index=False)
print("\nScore analysis saved to 'score_analysis.csv'.")

low_attendance_or_missing = student_data[
    (student_data["Attendance Percentage"] < 75) | (student_data["Assignment Completion"] == "No")
]


print("\nStudents with Attendance < 75% or Missing Assignments:")
print(low_attendance_or_missing)


low_attendance_or_missing.to_csv("low_attendance_or_missing.csv", index=False)
print("\nFiltered data saved to 'low_attendance_or_missing.csv'.")

file_path = "student_performance.csv"
try:
    student_data = pd.read_csv(file_path)

    subject_to_filter = "Statistics"
    failing_score_threshold = 40

    failing_students = student_data[
        (student_data["Subject"] == subject_to_filter) & (student_data["Score"] < failing_score_threshold)
    ]

    print(f"\nStudents failing in {subject_to_filter}:")
    print(failing_students)

    output_file = f"failing_students_in_{subject_to_filter}.csv"
    failing_students.to_csv(output_file, index=False)
    print(f"\nFiltered data has been saved to '{output_file}'.")
except FileNotFoundError:
    print(f"Error: The file '{file_path}' does not exist.")

import pandas as pd

file_path = "student_performance.csv"
try:
    student_data = pd.read_csv(file_path)

    print("Data type of 'Score' before conversion:")
    print(student_data["Score"].dtype)

    student_data["Score"] = student_data["Score"].astype(int)

    print("\nData type of 'Score' after conversion:")
    print(student_data["Score"].dtype)

    output_file = "updated_student_performance.csv"
    student_data.to_csv(output_file, index=False)
    print(f"\nUpdated data has been saved to '{output_file}'.")

except FileNotFoundError:
    print(f"Error: The file '{file_path}' does not exist.")
except ValueError:
    print("Error: The 'Score' column contains non-numeric values that cannot be converted to integers.")

import matplotlib.pyplot as plt


file_path = "student_performance.csv"
student_data = pd.read_csv(file_path)


average_scores = student_data.groupby("Subject")["Score"].mean()


plt.figure(figsize=(8, 6))
average_scores.plot(kind="bar", color="skyblue", edgecolor="black")
plt.title("Average Scores by Subject", fontsize=14)
plt.xlabel("Subject", fontsize=12)
plt.ylabel("Average Score", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

def categorize_attendance(attendance):
    if attendance < 50:
        return "<50%"
    elif 50 <= attendance <= 75:
        return "50-75%"
    else:
        return ">75%"

student_data["Attendance Category"] = student_data["Attendance Percentage"].apply(categorize_attendance)


attendance_distribution = student_data["Attendance Category"].value_counts()


plt.figure(figsize=(8, 8))
attendance_distribution.plot(kind="pie", autopct="%1.1f%%", startangle=90, colors=["red", "orange", "green"])
plt.title("Attendance Percentage Categories", fontsize=14)
plt.ylabel("")
plt.show()

selected_student = "Prioty"
student_scores = student_data[student_data["Student Name"] == selected_student]

student_scores = student_scores.sort_values(by="Subject")

plt.figure(figsize=(8, 6))
plt.plot(student_scores["Subject"], student_scores["Score"], marker="o", color="blue", label=selected_student)
plt.title(f"Performance Trends for {selected_student}", fontsize=14)
plt.xlabel("Subject", fontsize=12)
plt.ylabel("Score", fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.legend()
plt.tight_layout()
plt.show()

def calculate_aggregate_scores(data):
    aggregate_scores = data.groupby("Student Name")["Score"].mean().reset_index()
    aggregate_scores.rename(columns={"Score": "Aggregate Score"}, inplace=True)
    return aggregate_scores

def assign_grades(score):
    if score >= 85:
        return "A"
    elif score >= 70:
        return "B"
    elif score >= 50:
        return "C"
    else:
        return "Fail"

def generate_performance_report(data):

    aggregate_scores = calculate_aggregate_scores(data)


    aggregate_scores["Grade"] = aggregate_scores["Aggregate Score"].apply(assign_grades)


    full_report = pd.merge(data, aggregate_scores, on="Student Name")
    return full_report

performance_report = generate_performance_report(student_data)


output_file = "student_performance_report.csv"
performance_report.to_csv(output_file, index=False)


print("Student Performance Report:")
print(performance_report.head())

print(f"\nPerformance report has been saved to '{output_file}'.")

import pandas as pd
import re

file_path = "student_performance.csv"
try:
    student_data = pd.read_csv(file_path)

    def validate_student_id(student_id):

        pattern = r"^STU-\d{5}$"
        if re.match(pattern, student_id):
            return "Valid"
        else:
            return "Invalid"


    student_data["ID Status"] = student_data["Student ID"].apply(validate_student_id)


    invalid_ids = student_data[student_data["ID Status"] == "Invalid"]


    output_file = "validated_student_ids.csv"
    student_data.to_csv(output_file, index=False)


    print("Validation complete. Results:")
    print(student_data[["Student Name", "Student ID", "ID Status"]].head())

    if not invalid_ids.empty:
        print("\nInvalid Student IDs found:")
        print(invalid_ids[["Student Name", "Student ID"]])

    print(f"\nValidation results saved to '{output_file}'.")
except FileNotFoundError:
    print(f"Error: The file '{file_path}' does not exist.")

import pandas as pd



def add_student_data(df):
    student_name = input("Enter student name: ")
    student_id = input("Enter student ID: ")
    subject = input("Enter subject: ")
    score = int(input("Enter score: "))
    attendance = float(input("Enter attendance percentage: "))
    assignment_completion = input("Enter assignment completion status (Yes/No): ")

    new_student_data = pd.DataFrame({
        "Student Name": [student_name],
        "Student ID": [student_id],
        "Subject": [subject],
        "Score": [score],
        "Attendance Percentage": [attendance],
        "Assignment Completion": [assignment_completion]
    })

    updated_df = pd.concat([df, new_student_data], ignore_index=True)
    return updated_df


file_path = "student_performance.csv"
student_data = pd.read_csv(file_path)

student_data = add_student_data(student_data)

student_data.to_csv(file_path, index=False)

print("Student data added successfully.")
student_data

import pandas as pd


file_path = "student_performance.csv"
try:
    student_data = pd.read_csv(file_path)
except FileNotFoundError:
    print(f"Error: The file '{file_path}' does not exist.")
    student_data = pd.DataFrame(columns=["Student Name", "Student ID", "Subject", "Score", "Attendance Percentage", "Assignment Completion"])


def search_student(data):
    print("\nSearch for a student:")
    search_query = input("Enter Student Name or ID: ")


    results = data[(data["Student Name"].str.contains(search_query, case=False, na=False)) |
                   (data["Student ID"].str.contains(search_query, case=False, na=False))]


    if results.empty:
        print("\nNo matching student found.")
    else:
        print("\nSearch results:")
        print(results)


search_student(student_data)

import pandas as pd


file_path = "student_performance.csv"
try:
    student_data = pd.read_csv(file_path)
except FileNotFoundError:
    print(f"Error: The file '{file_path}' does not exist.")
    student_data = pd.DataFrame(columns=["Student Name", "Student ID", "Subject", "Score", "Attendance Percentage", "Assignment Completion"])


def update_student(data):
    print("\nUpdate student details:")
    search_query = input("Enter Student Name or ID: ")


    student_index = data[
        (data["Student Name"].str.contains(search_query, case=False, na=False)) |
        (data["Student ID"].str.contains(search_query, case=False, na=False))
    ].index

    if len(student_index) == 0:
        print("\nNo matching student found.")
        return data

    print("\nMatching student(s):")
    print(data.loc[student_index])


    student_idx = int(input("\nEnter the index of the student to update (0-based index): "))
    if student_idx not in student_index:
        print("Invalid index.")
        return data

    print("\nWhat would you like to update?")
    print("1. Score")
    print("2. Attendance Percentage")
    choice = input("Enter your choice (1/2): ")

    if choice == "1":
        try:
            new_score = int(input("Enter the new score (0-100): "))
            if new_score < 0 or new_score > 100:
                raise ValueError("Score must be between 0 and 100.")
            data.at[student_idx, "Score"] = new_score
            print("Score updated successfully.")
        except ValueError as e:
            print(f"Invalid input for score: {e}")
    elif choice == "2":
        try:
            new_attendance = float(input("Enter the new attendance percentage (0-100): "))
            if new_attendance < 0 or new_attendance > 100:
                raise ValueError("Attendance percentage must be between 0 and 100.")
            data.at[student_idx, "Attendance Percentage"] = new_attendance
            print("Attendance updated successfully.")
        except ValueError as e:
            print(f"Invalid input for attendance: {e}")
    else:
        print("Invalid choice.")

    return data


student_data = update_student(student_data)


student_data.to_csv(file_path, index=False)
print(f"\nUpdated data has been saved to '{file_path}'.")